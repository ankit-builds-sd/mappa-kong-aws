{
  "namespace": "hwmApartment",
  "extends": ["../hwm", "../project", "../global", "../occupancy"],
  "quantities": [
    {
      "id": "hwmApartment__q_outcomes",
      "projectInputs": [
        "hwmApartment__pi_hotWaterFloors",
        "hwmApartment__pi_swhType",
        "hwmApartment__pi_swhVariant",
        "hwmApartment__pi_hpType",
        "hwmApartment__pi_userSwhCapacity",
        "hwmApartment__pi_userHpCapacity",
        "hwmApartment__pi_option",
        "hwmApartment__pi_hpHeatingSpeed",
        "project__pi_city",
        "project__pi_floorHeight",
        "project__pi_numberOfFloors",
        "hwmApartment__pi_selectedProductIdentifier",
        "hwmApartment__pi_efficiencyFactor",
        "hwmApartment__pi_floorHeight",
        "hwmApartment__pi_userCityResidentialUtilityTariff",
        "hwm__pi_userNumberOfShafts",
        "hwmApartment__pi_capexSourceType",
        "hwmApartment__pi_customCapex"
      ],
      "staticValues": [
        "hwm__st_slowHeatingTime",
        "hwm__st_fastHeatingTime",
        "hwm__st_defaultHeatingTime",
        "hwm__st_initialTemp",
        "hwm__st_conversionFactor",
        "global__st_hoursInDay",
        "hwm__st_heatLossCoeff",
        "hwm__st_supRet",
        "hwm__st_defaultNumberOfShafts",
        "hwm__st_hzPipe",
        "hwm__st_outletTempSwimmingPool",
        "hwm__st_outletTempOther"
      ],
      "lookUps": [],
      "quantities": ["hwmApartment__q_outcomesPreSdPlus", "hwmApartment__q_technologySelection", "hwmApartment__q_hwmDemand"],
      "output": "let defaultCityResidentialUtilityTariff: number;\n  let cityResidentialUtilityTariff: number;\n  let selectedProductPrice: number;\n  let selectedProductCapacity: number;\n  let selectedProductRatedInputPower: number;\n  let selectedProductRatedHeatingCapacity: number;\n  let selectedProductMiscHpCost: number;\n  let selectedProductMiscSwhCost: number;\n  let theProduct: any;\n  let hpProductResolver: any;\n  let defaultProductIdentifier: string;\n  let defaultSwhApartmentCapacity = null;\n  let defaultHpApartmentCapacity = null;\n  let swhApartmentCapacity = null;\n  let hpApartmentCapacity = null;\n  let hwmApartmentEnergyAnnual = null;\n  let hwmApartmentCapexPostSDplus;\n  let hwmApartmentCustomCapex = null;\n  let hwmApartmentVendorCapex;\n  let hwmApartmentOpex = null;\n  let hwmApartmentAreaReqd = null;\n  let numberOfDomesticHp = null;\n  let numberOfProducts = null;\n  let numberOfCommercialHp = null;\n  let hybridNumberOfHp = null;\n  let numberOfHp = null;\n  let numberOfSwh = null;\n  let defaultNumberOfShafts = hwm__st_defaultNumberOfShafts;\n  let numberOfShafts = utilities.utility_userOrDefaultValue(\n    hwm__st_defaultNumberOfShafts,\n    hwm__pi_userNumberOfShafts\n  );\n  let time = utilities.utility_hwmHpTimeCalculator(\n    hwmApartment__pi_hpHeatingSpeed,\n    hwm__st_slowHeatingTime,\n    hwm__st_fastHeatingTime,\n    hwm__st_defaultHeatingTime\n  );\n  defaultCityResidentialUtilityTariff =\n    utilities.utility_getCityResidentialUtiliyTariff(project__pi_city);\n  cityResidentialUtilityTariff = utilities.utility_userOrDefaultValue(\n    defaultCityResidentialUtilityTariff,\n    hwmApartment__pi_userCityResidentialUtilityTariff\n  );\n  if (\n    hwmApartment__pi_option === 'solar water heater' &&\n    hwmApartment__pi_swhType === 'central'\n  ) {\n    defaultProductIdentifier = utilities.utility_swhProductResolver(\n      hwmApartment__pi_swhType,\n      hwmApartment__pi_swhVariant,\n      hwmApartment__q_technologySelection.defaultSwhCentralCapacity,\n      'HWM_Apartment'\n    );\n    theProduct = utilities.utility_defaultOrSelectedProduct(\n      defaultProductIdentifier,\n      hwmApartment__pi_selectedProductIdentifier\n    );\n    selectedProductPrice = utilities.utility_numberFromString(theProduct.price);\n    selectedProductCapacity = utilities.utility_numberFromString(\n      theProduct.filters['Capacity '][0]\n    );\n    defaultSwhApartmentCapacity =\n      hwmApartment__q_technologySelection.defaultSwhCentralCapacity;\n    swhApartmentCapacity = utilities.utility_userOrDefaultValue(\n      defaultSwhApartmentCapacity,\n      hwmApartment__pi_userSwhCapacity\n    );\n    hwmApartmentEnergyAnnual = utilities.utility_swhEnergySavings(\n      hwmApartment__pi_swhType,\n      hwmApartment__q_technologySelection.defaultSwhCentralCapacity,\n      0\n    );\n    hwmApartmentCapexPostSDplus = utilities.utility_swhCapex(\n      hwmApartment__pi_swhType,\n      hwmApartment__q_technologySelection.defaultSwhCentralCapacity,\n      selectedProductPrice,\n      selectedProductCapacity,\n      0\n    );\n    hwmApartmentVendorCapex =\n      hwmApartmentCapexPostSDplus -\n      hwmApartment__q_outcomesPreSdPlus.hwmCapexPreSdPlus;\n    hwmApartmentOpex = utilities.utility_energyOpex(\n      hwmApartmentEnergyAnnual,\n      project__pi_city\n    );\n    hwmApartmentAreaReqd = hwmApartment__q_technologySelection.swhAreaRequired;\n  } else if (\n    hwmApartment__pi_option === 'solar water heater' &&\n    hwmApartment__pi_swhType === 'individual'\n  ) {\n    defaultProductIdentifier = utilities.utility_swhProductResolver(\n      hwmApartment__pi_swhType,\n      hwmApartment__pi_swhVariant,\n      hwmApartment__q_technologySelection.defaultSwhCentralCapacity,\n      'HWM_Apartment'\n    );\n    theProduct = utilities.utility_defaultOrSelectedProduct(\n      defaultProductIdentifier,\n      hwmApartment__pi_selectedProductIdentifier\n    );\n    selectedProductPrice = utilities.utility_numberFromString(theProduct.price);\n    selectedProductCapacity = utilities.utility_numberFromString(\n      theProduct.filters['Capacity '][0]\n    );\n    defaultSwhApartmentCapacity =\n      hwmApartment__q_technologySelection.defaultSwhIndividualCapacity;\n    swhApartmentCapacity = utilities.utility_userOrDefaultValue(\n      defaultSwhApartmentCapacity,\n      hwmApartment__pi_userSwhCapacity\n    );\n    hwmApartmentEnergyAnnual = utilities.utility_swhEnergySavings(\n      hwmApartment__pi_swhType,\n      hwmApartment__q_technologySelection.defaultSwhIndividualCapacity,\n      hwmApartment__q_hwmDemand.hotWaterApts\n    );\n    hwmApartmentCapexPostSDplus = utilities.utility_swhCapex(\n      hwmApartment__pi_swhType,\n      hwmApartment__q_technologySelection.defaultSwhIndividualCapacity,\n      selectedProductPrice,\n      selectedProductCapacity,\n      hwmApartment__q_hwmDemand.hotWaterApts\n    );\n    hwmApartmentVendorCapex =\n      hwmApartmentCapexPostSDplus -\n      hwmApartment__q_outcomesPreSdPlus.hwmCapexPreSdPlus;\n    hwmApartmentOpex = utilities.utility_energyOpex(\n      hwmApartmentEnergyAnnual,\n      project__pi_city\n    );\n    hwmApartmentAreaReqd = hwmApartment__q_technologySelection.swhAreaRequired;\n  } else if (\n    hwmApartment__pi_option === 'heat pump' &&\n    hwmApartment__pi_hpType === 'domestic'\n  ) {\n    const outletTemp = utilities.utility_hwmOutletTemp(\n      hwmApartment__pi_hpType,\n      hwm__st_outletTempSwimmingPool,\n      hwm__st_outletTempOther\n    );\n    hpProductResolver = utilities.utility_hpProductresolver(\n      hwmApartment__pi_hpType,\n      hwmApartment__q_technologySelection.defaultHpDomesticCapacity,\n      time,\n      project__pi_floorHeight,\n      hwmApartment__pi_hotWaterFloors,\n      outletTemp,\n      hwm__st_initialTemp,\n      hwm__st_conversionFactor,\n      global__st_hoursInDay,\n      hwm__st_heatLossCoeff,\n      hwm__st_supRet,\n      numberOfShafts,\n      hwm__st_hzPipe,\n      'HWM_Apartment'\n    );\n    theProduct = utilities.utility_defaultOrSelectedProduct(\n      hpProductResolver.defaultProductIdentifier,\n      hwmApartment__pi_selectedProductIdentifier\n    );\n    selectedProductPrice = utilities.utility_numberFromString(theProduct.price);\n    selectedProductRatedInputPower = utilities.utility_numberFromObject(\n      theProduct.properties,\n      'Rated Input Power (kW)'\n    );\n    defaultHpApartmentCapacity =\n      hwmApartment__q_technologySelection.defaultHpDomesticCapacity;\n    hpApartmentCapacity = utilities.utility_userOrDefaultValue(\n      defaultHpApartmentCapacity,\n      hwmApartment__pi_userHpCapacity\n    );\n    numberOfProducts = hwmApartment__q_hwmDemand.hotWaterApts;\n    hwmApartmentEnergyAnnual = utilities.utility_hpEnergySavings(\n      hwmApartment__pi_hpType,\n      hwmApartment__q_technologySelection.defaultHpDomesticCapacity,\n      selectedProductRatedInputPower,\n      numberOfProducts,\n      time\n    );\n    hwmApartmentCapexPostSDplus = utilities.utility_hpCapex(\n      hwmApartment__pi_hpType,\n      hwmApartment__q_technologySelection.defaultHpDomesticCapacity,\n      numberOfProducts,\n      selectedProductPrice,\n      selectedProductRatedInputPower,\n      hpProductResolver.pipelength\n    );\n    hwmApartmentVendorCapex =\n      hwmApartmentCapexPostSDplus -\n      hwmApartment__q_outcomesPreSdPlus.hwmCapexPreSdPlus;\n    hwmApartmentOpex = utilities.utility_energyOpex(\n      hwmApartmentEnergyAnnual,\n      project__pi_city\n    );\n    hwmApartmentAreaReqd = hwmApartment__q_technologySelection.hpAreaRequired;\n  } else if (\n    hwmApartment__pi_option === 'heat pump' &&\n    hwmApartment__pi_hpType === 'commercial'\n  ) {\n    const outletTemp = utilities.utility_hwmOutletTemp(\n      hwmApartment__pi_hpType,\n      hwm__st_outletTempSwimmingPool,\n      hwm__st_outletTempOther\n    );\n    hpProductResolver = utilities.utility_hpProductresolver(\n      hwmApartment__pi_hpType,\n      hwmApartment__q_technologySelection.defaultHpCommercialCapacity,\n      time,\n      project__pi_floorHeight,\n      hwmApartment__pi_hotWaterFloors,\n      outletTemp,\n      hwm__st_initialTemp,\n      hwm__st_conversionFactor,\n      global__st_hoursInDay,\n      hwm__st_heatLossCoeff,\n      hwm__st_supRet,\n      numberOfShafts,\n      hwm__st_hzPipe,\n      'HWM_Apartment'\n    );\n    theProduct = utilities.utility_defaultOrSelectedProduct(\n      hpProductResolver.defaultProductIdentifier,\n      hwmApartment__pi_selectedProductIdentifier\n    );\n    selectedProductPrice = utilities.utility_numberFromString(theProduct.price);\n    selectedProductRatedInputPower = utilities.utility_numberFromObject(\n      theProduct.properties,\n      'Rated Input Power (kW)'\n    );\n    numberOfProducts =\n      hpProductResolver.requiredHeatingCapacity /\n      selectedProductRatedInputPower;\n    defaultHpApartmentCapacity =\n      hwmApartment__q_technologySelection.defaultHpCommercialCapacity;\n    hpApartmentCapacity = utilities.utility_userOrDefaultValue(\n      defaultHpApartmentCapacity,\n      hwmApartment__pi_userHpCapacity\n    );\n    hwmApartmentEnergyAnnual = utilities.utility_hpEnergySavings(\n      hwmApartment__pi_hpType,\n      hwmApartment__q_technologySelection.defaultHpCommercialCapacity,\n      selectedProductRatedInputPower,\n      numberOfProducts,\n      time\n    );\n    hwmApartmentCapexPostSDplus = utilities.utility_hpCapex(\n      hwmApartment__pi_hpType,\n      hwmApartment__q_technologySelection.defaultHpCommercialCapacity,\n      numberOfProducts,\n      selectedProductPrice,\n      selectedProductRatedInputPower,\n      hpProductResolver.pipelength\n    );\n    hwmApartmentVendorCapex =\n      hwmApartmentCapexPostSDplus -\n      hwmApartment__q_outcomesPreSdPlus.hwmCapexPreSdPlus;\n    hwmApartmentOpex = utilities.utility_energyOpex(\n      hwmApartmentEnergyAnnual,\n      project__pi_city\n    );\n    hwmApartmentAreaReqd = hwmApartment__q_technologySelection.hpAreaRequired;\n  } else if (hwmApartment__pi_option === 'hybrid') {\n    hpProductResolver = utilities.utility_hybridProductResolver(\n      hwmApartment__q_technologySelection.defaultSwhCentralCapacity,\n      hwmApartment__q_technologySelection.defaultHpCommercialCapacity,\n      time,\n      hwmApartment__q_hwmDemand.hotWaterApts, //value hotWaterFloors not present in demand calc box\n      hwmApartment__pi_efficiencyFactor,\n      hwmApartment__pi_floorHeight,\n      'HWM_Apartment'\n    );\n    theProduct = utilities.utility_defaultOrSelectedProduct(\n      hpProductResolver.productIdentifier,\n      hwmApartment__pi_selectedProductIdentifier\n    );\n    selectedProductPrice = utilities.utility_numberFromString(theProduct.price);\n    selectedProductRatedHeatingCapacity = utilities.utility_numberFromObject(\n      theProduct.properties,\n      'Rated Heating Capacity (kW)'\n    );\n    selectedProductCapacity = utilities.utility_numberFromString(\n      theProduct.filters['Capacity '][0]\n    );\n    selectedProductRatedInputPower = utilities.utility_numberFromObject(\n      theProduct.properties,\n      'Rated Input Power (kW)'\n    );\n    selectedProductMiscHpCost = utilities.utility_numberFromString(\n      theProduct.misc[0]\n    );\n    selectedProductMiscSwhCost = utilities.utility_numberFromString(\n      theProduct.misc[2]\n    );\n    hybridNumberOfHp =\n      hpProductResolver.hybridHPRequiredHeatingCapacity /\n      selectedProductRatedHeatingCapacity;\n    numberOfHp =\n      hpProductResolver.hpRequiredheatingCapacity /\n      selectedProductRatedHeatingCapacity;\n    numberOfSwh = utilities.roundTo100(\n      hwmApartment__q_technologySelection.defaultSwhCentralCapacity /\n        selectedProductCapacity\n    );\n\n    hwmApartmentEnergyAnnual = utilities.utility_hybridEnergySavings(\n      hwmApartment__q_technologySelection.defaultHpCommercialCapacity,\n      hwmApartment__q_technologySelection.defaultSwhCentralCapacity,\n      numberOfHp,\n      hybridNumberOfHp,\n      selectedProductRatedInputPower,\n      time\n    );\n    hwmApartmentCapexPostSDplus = utilities.utility_hybridCapex(\n      hwmApartment__q_technologySelection.defaultHpCommercialCapacity,\n      numberOfHp,\n      numberOfSwh,\n      selectedProductMiscHpCost,\n      selectedProductMiscSwhCost,\n      selectedProductRatedInputPower\n    );\n    hwmApartmentVendorCapex =\n      hwmApartmentCapexPostSDplus -\n      hwmApartment__q_outcomesPreSdPlus.hwmCapexPreSdPlus;\n    hwmApartmentOpex = utilities.utility_energyOpex(\n      hwmApartmentEnergyAnnual,\n      project__pi_city\n    );\n    hwmApartmentAreaReqd =\n      hwmApartment__q_technologySelection.hybridAreaRequired;\n  }\n  if (hwmApartment__pi_capexSourceType === 'custom') {\n    hwmApartmentCustomCapex = hwmApartment__pi_customCapex;\n  }\n  return {\n    defaultOrSelectedProduct: theProduct,\n    numberOfProducts,\n    hpApartmentCapacity,\n    defaultHpApartmentCapacity,\n    swhApartmentCapacity,\n    defaultSwhApartmentCapacity,\n    hwmApartmentEnergyAnnual,\n    hwmApartmentCapexPostSDplus,\n    hwmApartmentVendorCapex,\n    hwmApartmentCustomCapex,\n    hwmApartmentOpex,\n    hwmApartmentAreaReqd,\n    defaultCityResidentialUtilityTariff,\n    cityResidentialUtilityTariff,\n  };"
    },
    {
      "id": "hwmApartment__q_hwmDemand",
      "projectInputs": [
        "hwmApartment__pi_lpcdPerOccupant",
        "hwmApartment__pi_lpdPerApartment",
        "hwmApartment__pi_hotWaterFloors",
        "hwmApartment__pi_demandAssumptionType",
        "hwmApartment__pi_demandAssumption",
        "hwmApartment__pi_demandByArea",
        "hwmApartment__pi_demandByBath"
      ],
      "staticValues": ["occupancy__st_singleBedroomOccupants"],
      "lookUps": [],
      "quantities": [
        "occupancy__q_numberOfDwellingUnitsApartments",
        "occupancy__q_occupancyApartment",
        "occupancy__q_perFloorOccupancy",
        "occupancy__q_perFloorApartments"
      ],
      "output": "let hotWaterPerOccupant = null;\n  let hotWaterOccupants = null;\n  let hotWaterApts = null;\n  let hwmDemand = null;\n  if (hwmApartment__pi_demandAssumptionType === 'lpcd per occupant') {\n    hotWaterPerOccupant = hwmApartment__pi_lpcdPerOccupant;\n  } else if (\n    hwmApartment__pi_demandAssumptionType ===\n    'link to installed efficient fixtures'\n  ) {\n    hotWaterPerOccupant = 100; //need efficient fixtures services\n  } else if (hwmApartment__pi_demandAssumptionType === 'lpd per apartment') {\n    hotWaterPerOccupant = hwmApartment__pi_lpdPerApartment;\n  }\n\n  if (hwmApartment__pi_demandByBath === 'all baths') {\n    if (hwmApartment__pi_demandByArea === 'total demand') {\n      hotWaterOccupants = occupancy__q_occupancyApartment;\n      hotWaterApts = occupancy__q_numberOfDwellingUnitsApartments;\n    } else {\n      hotWaterOccupants =\n        occupancy__q_perFloorOccupancy * hwmApartment__pi_hotWaterFloors;\n      hotWaterApts =\n        occupancy__q_perFloorApartments * hwmApartment__pi_hotWaterFloors;\n    }\n  } else if (hwmApartment__pi_demandByBath === 'single bath') {\n    if (hwmApartment__pi_demandByArea === 'total demand') {\n      hotWaterOccupants =\n        occupancy__q_numberOfDwellingUnitsApartments *\n        occupancy__st_singleBedroomOccupants;\n      hotWaterApts = occupancy__q_numberOfDwellingUnitsApartments;\n    } else {\n      hotWaterOccupants =\n        occupancy__q_perFloorApartments *\n        occupancy__st_singleBedroomOccupants *\n        hwmApartment__pi_hotWaterFloors;\n      hotWaterApts =\n        occupancy__q_perFloorApartments * hwmApartment__pi_hotWaterFloors;\n    }\n  } else if (hwmApartment__pi_demandByBath === 'remaining baths') {\n    if (hwmApartment__pi_demandByArea === 'total demand') {\n      hotWaterOccupants =\n        occupancy__q_occupancyApartment -\n        occupancy__q_numberOfDwellingUnitsApartments *\n          occupancy__st_singleBedroomOccupants;\n      hotWaterApts = occupancy__q_numberOfDwellingUnitsApartments;\n    } else {\n      hotWaterOccupants =\n        (occupancy__q_perFloorOccupancy -\n          occupancy__q_perFloorApartments *\n            occupancy__st_singleBedroomOccupants) *\n        hwmApartment__pi_hotWaterFloors;\n      hotWaterApts =\n        occupancy__q_perFloorApartments * hwmApartment__pi_hotWaterFloors;\n    }\n  } else if (hwmApartment__pi_demandAssumptionType === 'lpd per apartment') {\n    if (hwmApartment__pi_demandByArea === 'total demand') {\n      hotWaterOccupants = occupancy__q_numberOfDwellingUnitsApartments;\n      hotWaterApts = occupancy__q_numberOfDwellingUnitsApartments;\n    } else {\n      hotWaterOccupants =\n        occupancy__q_perFloorApartments * hwmApartment__pi_hotWaterFloors;\n      hotWaterApts =\n        occupancy__q_perFloorApartments * hwmApartment__pi_hotWaterFloors;\n    }\n  }\n  hwmDemand = utilities.roundTo100(hotWaterPerOccupant * hotWaterOccupants);\n  return { hotWaterPerOccupant, hotWaterOccupants, hotWaterApts, hwmDemand };"
    },
    {
      "id": "hwmApartment__q_technologySelection",
      "projectInputs": [
        "project__pi_rooftopArea",
        "project__pi_unavailableRooftopArea",
        "hwmApartment__pi_option",
        "hwm__pi_userRooftopPerSwh",
        "hwm__pi_userRooftopPerHp",
        "hwmApartment__pi_userHotWaterHours"
      ],
      "staticValues": ["hwm__st_defaultRooftopPerSwh", "hwm__st_defaultRooftopPerHp", "hwmApartment__st_defaultHotWaterHours"],
      "lookUps": [],
      "quantities": ["occupancy__q_numberOfDwellingUnitsApartments", "hwmApartment__q_hwmDemand"],
      "output": "let defaultHotWaterHours = null;\nlet hotWaterHours = null;\nlet defaultRooftopPerHp = null;\nlet rooftopPerHp = null;\nlet defaultRooftopPerSwh = null;\nlet rooftopPerSwh = null;\nlet defaultSwhCentralCapacity = null;\nlet defaultSwhIndividualCapacity = null;\nlet swhAreaRequired = null;\nlet hpAreaRequired = null;\nlet defaultHpCommercialCapacity = null;\nlet defaultHpDomesticCapacity = null;\nlet hybridAreaRequired = null;\nlet availableRooftop = null;\ndefaultHotWaterHours = hwmApartment__st_defaultHotWaterHours;\nhotWaterHours = utilities.utility_userOrDefaultValue(\nhwmApartment__st_defaultHotWaterHours,\nhwmApartment__pi_userHotWaterHours\n);\ndefaultRooftopPerHp = hwm__st_defaultRooftopPerHp;\nrooftopPerHp = utilities.utility_userOrDefaultValue(\nhwm__st_defaultRooftopPerHp,\nhwm__pi_userRooftopPerHp\n);\ndefaultRooftopPerSwh = hwm__st_defaultRooftopPerSwh;\nrooftopPerSwh = utilities.utility_userOrDefaultValue(\nhwm__st_defaultRooftopPerSwh,\nhwm__pi_userRooftopPerSwh\n);\navailableRooftop =\nproject__pi_rooftopArea - project__pi_unavailableRooftopArea;\nswhAreaRequired = hwmApartment__q_hwmDemand.hwmDemand * rooftopPerSwh;\nif (availableRooftop > swhAreaRequired) {\ndefaultSwhCentralCapacity = hwmApartment__q_hwmDemand.hwmDemand;\ndefaultSwhIndividualCapacity = utilities.roundTo100(\n  hwmApartment__q_hwmDemand.hwmDemand /\n    occupancy__q_numberOfDwellingUnitsApartments\n);\n} else {\nswhAreaRequired = availableRooftop;\ndefaultSwhCentralCapacity = utilities.roundTo100(\n  availableRooftop / rooftopPerSwh\n);\ndefaultSwhIndividualCapacity = utilities.roundTo100(\n  defaultSwhCentralCapacity / occupancy__q_numberOfDwellingUnitsApartments\n);\n}\nhpAreaRequired = hwmApartment__q_hwmDemand.hwmDemand * rooftopPerHp;\nif (availableRooftop > hpAreaRequired) {\ndefaultHpCommercialCapacity = hwmApartment__q_hwmDemand.hwmDemand;\ndefaultHpDomesticCapacity = utilities.roundTo100(\n  hwmApartment__q_hwmDemand.hwmDemand /\n    occupancy__q_numberOfDwellingUnitsApartments\n);\n} else {\nhpAreaRequired = availableRooftop;\ndefaultHpCommercialCapacity = utilities.roundTo100(\n  availableRooftop / rooftopPerHp\n);\ndefaultHpDomesticCapacity = utilities.roundTo100(\n  defaultHpCommercialCapacity / occupancy__q_numberOfDwellingUnitsApartments\n);\n}\nhybridAreaRequired = swhAreaRequired + hpAreaRequired;\nif (hwmApartment__pi_option === 'hybrid') {\nif (availableRooftop > hybridAreaRequired) {\n  defaultSwhCentralCapacity = hwmApartment__q_hwmDemand.hwmDemand;\n  defaultHpCommercialCapacity = hwmApartment__q_hwmDemand.hwmDemand;\n} else {\n  defaultSwhCentralCapacity =\n    (availableRooftop - hpAreaRequired) * rooftopPerSwh;\n  defaultHpCommercialCapacity =\n    hwmApartment__q_hwmDemand.hwmDemand / hotWaterHours;\n  hybridAreaRequired = availableRooftop;\n}\n}\nreturn {\ndefaultSwhCentralCapacity,\ndefaultSwhIndividualCapacity,\nswhAreaRequired,\nhpAreaRequired,\ndefaultHpCommercialCapacity,\ndefaultHpDomesticCapacity,\nhybridAreaRequired,\ndefaultHotWaterHours,\nhotWaterHours,\ndefaultRooftopPerHp,\nrooftopPerHp,\ndefaultRooftopPerSwh,\nrooftopPerSwh,\n};"
    },
    {
      "id": "hwmApartment__q_outcomesPreSdPlus",
      "projectInputs": ["hwm__pi_baseCaseSwhCapacity"],
      "staticValues": ["hwm__st_baseCasePerLPDkWh", "hwm__st_swhCapexMultiplier"],
      "lookUps": [],
      "quantities": [],
      "output": "let hwmApartmentEnergyAnnualPreSdPlus =\nhwm__pi_baseCaseSwhCapacity * hwm__st_baseCasePerLPDkWh;\nlet hwmCapexPreSdPlus =\nhwm__pi_baseCaseSwhCapacity * hwm__st_swhCapexMultiplier;\nreturn { hwmApartmentEnergyAnnualPreSdPlus, hwmCapexPreSdPlus };"
    },
    {
      "id": "hwmApartment__q_projectLevelInsights",
      "projectInputs": ["project__pi_city", "hwmApartment__pi_userCityEmissionFactor"],
      "staticValues": ["global__st_convertKgToTon", "global__st_treesPerTonCF", "hwm__st_sdgNumberForHwm"],
      "lookUps": [],
      "quantities": ["hwmApartment__q_outcomes"],
      "output": "let defaultCityEmissionFactor =\nutilities.utility_getCityEmissionFactors(project__pi_city);\nlet cityEmissionFactor = utilities.utility_userOrDefaultValue(\ndefaultCityEmissionFactor,\nhwmApartment__pi_userCityEmissionFactor\n);\nlet cfMitigated =\ncityEmissionFactor *\nhwmApartment__q_outcomes.hwmApartmentEnergyAnnual *\nglobal__st_convertKgToTon;\nlet sdgNumber = hwm__st_sdgNumberForHwm;\nlet treesSaved = cfMitigated * global__st_treesPerTonCF;\nlet totalEnergyConsumptionPercentage =\n(hwmApartment__q_outcomes.hwmApartmentEnergyAnnual * 100) / 200;\nreturn {\ncfMitigated,\nsdgNumber,\ntreesSaved,\ntotalEnergyConsumptionPercentage,\ndefaultCityEmissionFactor,\ncityEmissionFactor,\n};"
    },
    {
      "id": "hwmApartment__q_flowDiagram",
      "projectInputs": [],
      "staticValues": ["global__st_daysInYear"],
      "lookUps": [],
      "quantities": ["hwmApartment__q_outcomes"],
      "output": "let residentialHotWater =\nhwmApartment__q_outcomes.hwmApartmentEnergyAnnual / global__st_daysInYear;\nlet residentialLighting = 0;\nlet residentialFan = 0;\nlet homeAppliances = 0;\nlet residentialHVAC = 0;\nlet commonArea = 0;\nreturn {\nresidentialHotWater,\nresidentialLighting,\nresidentialFan,\nhomeAppliances,\nresidentialHVAC,\ncommonArea,\n};"
    },
    {
      "id": "hwmApartment__q_secondaryImpact",
      "projectInputs": [],
      "staticValues": [],
      "lookUps": [],
      "quantities": [],
      "output": "let passiveWaterKL = 0;\nlet passiveWaterOpex = 0;\nlet passiveWasteKg = 0;\nlet passiveWasteOpex = 0;\nreturn { passiveWaterKL, passiveWaterOpex, passiveWasteKg, passiveWasteOpex };"
    },
    {
      "id": "hwmApartment__q_goalMonitoring",
      "projectInputs": [],
      "staticValues": [],
      "lookUps": [],
      "quantities": ["hwmApartment__q_outcomes"],
      "output": "let energyGoal = 100;\nlet contribution =\n(hwmApartment__q_outcomes.hwmApartmentEnergyAnnual * 100) / 200;\nreturn { energyGoal, contribution };"
    },
    {
      "id": "hwmApartment__q_overviewBarGraph",
      "projectInputs": [],
      "staticValues": ["hwmApartment__st_minValue"],
      "lookUps": [],
      "quantities": ["hwmApartment__q_flowDiagram", "hwmApartment__q_outcomes"],
      "output": "let barOneTitle = 'Annual Energy Savings';\nlet barOneValue = hwmApartment__q_outcomes.hwmApartmentEnergyAnnual;\nlet barOneMax = hwmApartment__q_outcomes.hwmApartmentEnergyAnnual;\nlet barOneMin = hwmApartment__st_minValue;\nlet barTwoSubOneTitle = 'Residential Hot Water';\nlet barTwoValue = hwmApartment__q_flowDiagram.residentialHotWater;\nlet barTwoSubOneTitlePercentage = (barTwoValue * 100) / barOneValue;\nreturn {\nbarOneTitle,\nbarOneValue,\nbarOneMax,\nbarOneMin,\nbarTwoSubOneTitle,\nbarTwoValue,\nbarTwoSubOneTitlePercentage,\n};"
    },
    {
      "id": "hwmApartment__q_overviewDonutGraph",
      "projectInputs": [],
      "staticValues": [],
      "lookUps": [],
      "quantities": ["hwmApartment__q_outcomes"],
      "output": "let donutOneTitle = '% of Total Energy';\nlet donutOneValue =\n(hwmApartment__q_outcomes.hwmApartmentEnergyAnnual * 100) / 200;\nlet donutTwoTitle = '% of Residential Hot Water';\nlet donutTwoValue =\n(hwmApartment__q_outcomes.hwmApartmentEnergyAnnual * 100) / 300;\nreturn {\ndonutOneTitle,\ndonutOneValue,\ndonutTwoTitle,\ndonutTwoValue,\n};"
    }
  ],
  "types": {
    "hwmApartment__pi_swhType": "SwhType",
    "hwmApartment__pi_swhVariant": "SwhVariant",
    "hwmApartment__pi_hpType": "HpType",
    "hwmApartment__pi_userSwhCapacity": "number",
    "hwmApartment__pi_userHpCapacity": "number",
    "hwmApartment__pi_option": "HwmOption",
    "hwmApartment__pi_hpHeatingSpeed": "HwmHpHeatingSpeed",
    "project__pi_city": "string",
    "project__pi_floorHeight": "number",
    "project__pi_numberOfFloors": "number",
    "hwmApartment__pi_selectedProductIdentifier": "string",
    "hwmApartment__pi_efficiencyFactor": "number",
    "hwmApartment__pi_floorHeight": "number",
    "hwm__st_slowHeatingTime": "number",
    "hwm__st_fastHeatingTime": "number",
    "hwm__st_defaultHeatingTime": "number",
    "hwm__st_initialTemp": "number",
    "hwm__st_conversionFactor": "number",
    "global__st_hoursInDay": "number",
    "hwm__st_heatLossCoeff": "number",
    "hwm__st_supRet": "number",
    "hwm__st_numberOfShafts": "number",
    "hwm__st_hzPipe": "number",
    "hwm__st_outletTempSwimmingPool": "number",
    "hwm__st_outletTempOther": "number",
    "hwm__pi_baseCaseSwhCapacity": "number",
    "hwm__st_baseCasePerLPDkWh": "number",
    "hwm__st_swhCapexMultiplier": "number",
    "global__st_convertKgToTon": "number",
    "global__st_treesPerTonCF": "number",
    "hwm__st_sdgNumberForHwm": "number",
    "global__st_daysInYear": "number",
    "hwmApartment__st_minValue": "number",
    "hwmApartment__pi_userCityResidentialUtilityTariff": "number",
    "hwm__st_defaultNumberOfShafts": "number",
    "hwm__pi_userNumberOfShafts": "number",
    "hwmApartment__pi_userCityEmissionFactor": "number",
    "hwmApartment__pi_capexSourceType": "string",
    "hwmApartment__pi_customCapex": "number",
    "hwmApartment__pi_hotWaterFloors": "number"
  }
}
