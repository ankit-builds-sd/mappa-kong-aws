{
  "quantities": [
    {
      "id": "hwmSwimmingPool__q_outcomes",
      "arguments": "hwmSwimmingPool__pi_hpType:HpType,hwmSwimmingPool__pi_option:HwmOption,hwmSwimmingPool__pi_userPoolCapacity:number,hwmSwimmingPool__pi_hpHeatingSpeed:HwmHpHeatingSpeed,project__pi_city:string,project__pi_floorHeight:number,project__pi_numberOfFloors:number,hwmSwimmingPool__pi_selectedProductIdentifier:string,hwmSwimmingPool__pi_outcomePreSdPlus:number,hwm__st_slowHeatingTime:number,hwm__st_fastHeatingTime:number,hwm__st_defaultHeatingTime:number,hwm__st_initialTemp:number,hwm__st_conversionFactor:number,global__st_hoursInDay:number,hwm__st_heatLossCoeff:number,hwm__st_supRet:number,hwm__st_numberOfShafts:number,hwm__st_hzPipe:number,hwm__st_outletTempSwimmingPool:number,hwm__st_outletTempOther:number,hwmSwimmingPool__q_technologySelection",
      "body": "let theProduct: any;\n  let defaultPoolCapacity: number;\n  let hwmPoolEnergyAnnual: any;\n  let hwmPoolCapexPostSdPlus: any;\n  let hwmPoolCapex: number;\n  let hwmPoolOpex: number;\n  let hwmPoolAreaRequired: number;\n  let selectedProductPrice: number;\n  let selectedProductRatedInputPower: number;\n  let selectedProductCapacity: number;\n  let numberOfProducts: number;\n  let time = utilities.utility_hwmHpTimeCalculator(\n    hwmSwimmingPool__pi_hpHeatingSpeed,\n    hwm__st_slowHeatingTime,\n    hwm__st_fastHeatingTime,\n    hwm__st_defaultHeatingTime\n  );\n\n  if (\n    hwmSwimmingPool__pi_option === 'heat pump' &&\n    hwmSwimmingPool__pi_hpType === 'swimming pool'\n  ) {\n    const outletTemp = utilities.utility_hwmOutletTemp(\n      hwmSwimmingPool__pi_hpType,\n      hwm__st_outletTempSwimmingPool,\n      hwm__st_outletTempOther\n    );\n    let hpProductResolver = utilities.utility_hpProductresolver(\n      hwmSwimmingPool__pi_hpType,\n      hwmSwimmingPool__q_technologySelection.defaultHpPoolCapacity,\n      time,\n      project__pi_floorHeight,\n      project__pi_numberOfFloors,\n      outletTemp,\n      hwm__st_initialTemp,\n      hwm__st_conversionFactor,\n      global__st_hoursInDay,\n      hwm__st_heatLossCoeff,\n      hwm__st_supRet,\n      hwm__st_numberOfShafts,\n      hwm__st_hzPipe,\n      'HWM_Pool'\n    );\n    theProduct = utilities.utility_defaultOrSelectedProduct(\n      hpProductResolver.defaultProductIdentifier,\n      hwmSwimmingPool__pi_selectedProductIdentifier\n    );\n    selectedProductPrice = utilities.utility_numberFromString(theProduct.price);\n    selectedProductCapacity = utilities.utility_numberFromString(\n      theProduct.filters['Capacity '][0]\n    );\n    selectedProductRatedInputPower = utilities.utility_numberFromObject(\n      theProduct.properties,\n      'Rated Input Power (kW)'\n    );\n    numberOfProducts =\n      hpProductResolver.requiredHeatingCapacity / selectedProductCapacity;\n    defaultPoolCapacity =\n      hwmSwimmingPool__q_technologySelection.defaultHpPoolCapacity;\n    defaultPoolCapacity = utilities.utility_userOrDefaultValue(\n      defaultPoolCapacity,\n      hwmSwimmingPool__pi_userPoolCapacity\n    );\n    hwmPoolEnergyAnnual = utilities.utility_hpEnergySavings(\n      hwmSwimmingPool__pi_hpType,\n      hwmSwimmingPool__q_technologySelection.defaultHpPoolCapacity,\n      selectedProductRatedInputPower,\n      numberOfProducts,\n      time\n    );\n    hwmPoolCapexPostSdPlus = utilities.utility_hpCapex(\n      hwmSwimmingPool__pi_hpType,\n      hwmSwimmingPool__q_technologySelection.defaultHpPoolCapacity,\n      numberOfProducts,\n      selectedProductPrice,\n      selectedProductRatedInputPower,\n      hpProductResolver.pipelength\n    );\n    hwmPoolOpex = utilities.utility_energyOpex(\n      hwmPoolEnergyAnnual,\n      project__pi_city\n    );\n    hwmPoolCapex =\n      hwmPoolCapexPostSdPlus - hwmSwimmingPool__pi_outcomePreSdPlus;\n    hwmPoolAreaRequired = hwmSwimmingPool__q_technologySelection.hpAreaRequired;\n  }\n  return {\n    defaultPoolCapacity,\n    numberOfProducts,\n    hwmPoolEnergyAnnual,\n    hwmPoolCapexPostSdPlus,\n    hwmPoolAreaRequired,\n    hwmPoolCapex,\n    hwmPoolOpex,\n  };"
    },
    {
      "id": "hwmSwimmingPool__q_technologySelection",
      "arguments": "hwm__st_rooftopPerHp:number,hwmSwimmingPool__q_hwmDemand",
      "body": "let hpPoolAreaRequired = null;\nlet defaultHpPoolCapacity = null;\nhpPoolAreaRequired = hwmSwimmingPool__q_hwmDemand * hwm__st_rooftopPerHp;\ndefaultHpPoolCapacity = utilities.roundTo100(hwmSwimmingPool__q_hwmDemand);\nreturn { hpPoolAreaRequired, defaultHpPoolCapacity };"
    },
    {
      "id": "hwmSwimmingPool__q_hwmDemand",
      "arguments": "project__pi_swimmingPool:number,hwmSwimmingPool__st_hotWaterRequired",
      "body": "let hwmPoolDemand = null;\nhwmPoolDemand =\nproject__pi_swimmingPool * hwmSwimmingPool__st_hotWaterRequired;\nreturn hwmPoolDemand;"
    },
    {
      "id": "hwmSwimmingPool__q_outcomesPreSdPlus",
      "arguments": "hwm__st_baseCasePerLPDkWh:number,hwm__st_swhCapexMultiplier:number,hwm__st_baseCasePoolSwhCapacity:number",
      "body": "let hwmPoolEnergyAnnualPreSdPlus =\nhwm__st_baseCasePoolSwhCapacity * hwm__st_baseCasePerLPDkWh;\nlet hwmCapexPreSdPlus =\nhwm__st_baseCasePoolSwhCapacity * hwm__st_swhCapexMultiplier;\nreturn { hwmPoolEnergyAnnualPreSdPlus, hwmCapexPreSdPlus };"
    },
    {
      "id": "hwmSwimmingPool__q_projectLevelInsights",
      "arguments": "project__pi_city:string,global__st_convertKgToTon:number,global__st_treesPerTonCF:number,hwm__st_sdgNumberForHwm:number,hwmSwimmingPool__q_outcomes",
      "body": "let cfMitigated =\nutilities.utility_getCityEmissionFactors(project__pi_city) *\nhwmSwimmingPool__q_outcomes.hwmPoolEnergyAnnual *\nglobal__st_convertKgToTon;\nlet sdgNumber = hwm__st_sdgNumberForHwm;\nlet treesSaved = cfMitigated * global__st_treesPerTonCF;\nlet totalEnergyConsumptionPercentage =\n(hwmSwimmingPool__q_outcomes.hwmPoolEnergyAnnual * 100) / 200;\nreturn {\ncfMitigated,\nsdgNumber,\ntreesSaved,\ntotalEnergyConsumptionPercentage,\n};"
    },
    {
      "id": "hwmSwimmingPool__q_flowDiagram",
      "arguments": "global__st_daysInYear:number,hwmSwimmingPool__q_outcomes",
      "body": "let residentialHotWater = 0;\nlet residentialLighting = 0;\nlet residentialFan = 0;\nlet homeAppliances = 0;\nlet residentialHVAC = 0;\nlet commonArea =\nhwmSwimmingPool__q_outcomes.hwmPoolEnergyAnnual / global__st_daysInYear;\nreturn {\nresidentialHotWater,\nresidentialLighting,\nresidentialFan,\nhomeAppliances,\nresidentialHVAC,\ncommonArea,\n};"
    },
    {
      "id": "hwmSwimmingPool__q_secondaryImpact",
      "arguments": "",
      "body": "let passiveWaterKL = 0;\nlet passiveWaterOpex = 0;\nlet passiveWasteKg = 0;\nlet passiveWasteOpex = 0;\nreturn { passiveWaterKL, passiveWaterOpex, passiveWasteKg, passiveWasteOpex };"
    },
    {
      "id": "hwmSwimmingPool__q_goalMonitoring",
      "arguments": "hwmSwmimmingPool__q_outcomes",
      "body": "let energyGoal = 100;\nlet contribution =\n(hwmSwmimmingPool__q_outcomes.hwmPoolEnergyAnnual * 100) / 200;\nreturn { energyGoal, contribution };"
    },
    {
      "id": "hwmSwimmingPool__q_overviewBarGraph",
      "arguments": "hwmSwimmingPool__st_minValue:number,hwmSwimmingPool__q_flowDiagram,hwmSwimmingPool__q_outcomes",
      "body": "let barOneTitle = 'Annual Energy Savings';\nlet barOneValue = hwmSwimmingPool__q_outcomes.hwmPoolEnergyAnnual;\nlet barOneMax = hwmSwimmingPool__q_outcomes.hwmPoolEnergyAnnual;\nlet barOneMin = hwmSwimmingPool__st_minValue;\nlet barTwoSubOneTitle = 'Common Area';\nlet barTwoValue = hwmSwimmingPool__q_flowDiagram.commonArea;\nlet barTwoSubOneTitlePercentage = (barTwoValue * 100) / barOneValue;\nreturn {\nbarOneTitle,\nbarOneValue,\nbarOneMax,\nbarOneMin,\nbarTwoSubOneTitle,\nbarTwoValue,\nbarTwoSubOneTitlePercentage,\n};"
    },
    {
      "id": "hwmSwimmingPool__q_overviewDonutGraph",
      "arguments": "hwmSwimmingPool__q_outcomes",
      "body": "let donutOneTitle = '% of Total Energy';\nlet donutOneValue =\n(hwmSwimmingPool__q_outcomes.hwmPoolEnergyAnnual * 100) / 200;\nlet donutTwoTitle = '% of Common Area Energy';\nlet donutTwoValue =\n(hwmSwimmingPool__q_outcomes.hwmPoolEnergyAnnual * 100) / 300;\nreturn {\ndonutOneTitle,\ndonutOneValue,\ndonutTwoTitle,\ndonutTwoValue,\n};"
    }
  ]
}
