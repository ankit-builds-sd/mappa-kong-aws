{
  "namespace": "nstp",
  "extends": [
    "../twr"
  ],
  "types": {
    "nstp__st_goalMonitoringWaterTarget": "number",
    "nstp__st_goalSetting": "number",
    "nstp__st_waterGoalTarget": "number",
    "nstp__st_globalIndiaAverageElectricityTariff": "number",
    "nstp__pi_city": "string",
    "nstp__st_annualWater": "number",
    "nstp__st_globalLtoKLConverter": "number",
    "nstp__st_sdgNumber": "number",
    "nstp__st_globalTreesPerTonCF": "number",
    "nstp__st_annualBaselineWaterConsumption": "number",
    "nstp__pi_baseCaseStp": "string",
    "nstp__st_globalYoyInflationMBBR": "number",
    "nstp__st_globalCurrentYearMBBR": "number",
    "nstp__st_stpcoStudyYearMBBR": "number",
    "nstp__st_stpcoCivilMBBR": "number",
    "nstp__st_stpcoMAndEMBBR": "number",
    "nstp__st_stpcoCapacityMBBR": "number",
    "nstp__st_stpcoInflationMBBR": "number",
    "nstp__st_stpcoElectricityMBBR": "number",
    "nstp__st_stpcoChemicalMBBR": "number",
    "nstp__st_stpcoWorkforceMBBR": "number",
    "nstp__st_globalYoyInflationMBR": "number",
    "nstp__st_globalCurrentYearMBR": "number",
    "nstp__st_stpcoStudyYearMBR": "number",
    "nstp__st_stpcoCivilMBR": "number",
    "nstp__st_stpcoMAndEMBR": "number",
    "nstp__st_stpcoCapacityMBR": "number",
    "nstp__st_stpcoInflationMBR": "number",
    "nstp__st_stpcoElectricityMBR": "number",
    "nstp__st_stpcoChemicalMBR": "number",
    "nstp__st_stpcoWorkforceMBR": "number",
    "nstp__st_globalYoyInflationSBR": "number",
    "nstp__st_globalCurrentYearSBR": "number",
    "nstp__st_stpcoStudyYearSBR": "number",
    "nstp__st_stpcoCivilSBR": "number",
    "nstp__st_stpcoMAndESBR": "number",
    "nstp__st_stpcoCapacitySBR": "number",
    "nstp__st_stpcoInflationSBR": "number",
    "nstp__st_stpcoElectricitySBR": "number",
    "nstp__st_stpcoChemicalSBR": "number",
    "nstp__st_stpcoWorkforceSBR": "number",
    "nstp__st_mbbrArea": "number",
    "nstp__st_mbrArea": "number",
    "nstp__st_sbrArea": "number",
    "nstp__st_waterSavingPercentage": "number",
    "nstp__st_selectedProductPrice": "number",
    "nstp__st_selectedProductOpexElectricity": "number",
    "nstp__st_globalStandardWorkforceSalary": "number",
    "nstp__st_selectedProductOpexWorkforce": "number",
    "nstp__st_selectedProductOpexBacteria": "number",
    "nstp__st_selectedProductOpexChemical": "number",
    "nstp__st_selectedProductArea": "number"
  },
  "quantities": [
    {
      "id": "nstp__q_overviewBarGraph",
      "projectInputs": [],
      "staticValues": [],
      "lookUps": [],
      "quantities": [
        "nstp__q_outcomes",
        "nstp__q_flowDiagram"
      ],
      "output": "return {\n    title: \"Treated water reuse by category\",\n    totalSavings: nstp__q_outcomes.annualWater,\n    seriesNameOne:'Domestic',\n    seriesValueOne: nstp__q_flowDiagram.flowDiagramDomestic,\n    seriesNameTwo: 'Health Faucet',\n    seriesValueTwo: nstp__q_flowDiagram.flowDiagramHealthFaucet,\n    seriesNameThree: 'Flushing',\n    seriesValueThree: nstp__q_flowDiagram.flowDiagramFlushing,\n    seriesNameFour: 'Common Area',\n    seriesValueFour: nstp__q_flowDiagram.flowDiagramCommonArea,\n    seriesNameFive: 'Drinking',\n    seriesValueFive: nstp__q_flowDiagram.flowDiagramDrinking\n}"
    },
    {
      "id": "nstp__q_goalMonitoring",
      "projectInputs": [],
      "staticValues": [
        "nstp__st_goalMonitoringWaterTarget",
        "nstp__st_goalSetting",
        "nstp__st_waterGoalTarget"
      ],
      "lookUps": [],
      "quantities": [
        "nstp__q_outcomes"
      ],
      "output": "let ret= {\n    waterGoal: nstp__st_goalMonitoringWaterTarget,\n    nstpContribution: (nstp__q_outcomes.annualWater * 100) / (nstp__st_goalSetting - nstp__st_waterGoalTarget)\n}\nreturn ret;"
    },
    {
      "id": "nstp__q_secondaryImpact",
      "projectInputs": [
        "nstp__pi_city"
      ],
      "staticValues": [
        "nstp__st_globalIndiaAverageElectricityTariff"
      ],
      "lookUps": [],
      "quantities": [
        "nstp__q_outcomesPreSdPlus",
        "nstp__q_outcomes"
      ],
      "output": "const nstpPassiveEnergy = (nstp__q_outcomesPreSdPlus.annualEnergy / nstp__st_globalIndiaAverageElectricityTariff) - (nstp__q_outcomes.nstpCapexAnnualEnergyPostSdPlus/ CityDbData[nstp__pi_city].residentialDomestic) \nconst nstpEnergyOPex = (nstp__q_outcomesPreSdPlus.annualEnergy) - nstp__q_outcomes.nstpCapexAnnualEnergyPostSdPlus\nreturn {\n    nstpPassiveEnergy: nstpPassiveEnergy,\n    nstpEnergyOPex: nstpEnergyOPex,\n    nstpPassiveWasteKg: 0,\n    nstpPassiveWasteOpex: 0\n}"
    },
    {
      "id": "nstp__q_flowDiagram",
      "projectInputs": [],
      "staticValues": [],
      "lookUps": [],
      "quantities": [],
      "output": "return {\n    flowDiagramDomestic: 0,\n    flowDiagramHealthFaucet: 0,\n    flowDiagramFlushing: 0,\n    flowDiagramCommonArea: 0,\n    flowDiagramDrinking: 0\n}"
    },
    {
      "id": "nstp__q_projectLevelInsights",
      "projectInputs": [
        "nstp__pi_city"
      ],
      "staticValues": [
        "nstp__st_annualWater",
        "nstp__st_globalLtoKLConverter",
        "nstp__st_sdgNumber",
        "nstp__st_globalTreesPerTonCF",
        "nstp__st_annualBaselineWaterConsumption"
      ],
      "lookUps": [],
      "quantities": [],
      "output": "const nstpCfMitigated = CityDbData[nstp__pi_city].emissionFactors * nstp__st_annualWater * nstp__st_globalLtoKLConverter;\nconst nstpSDGNumber =  nstp__st_sdgNumber;\nconst nstpTreesSaves = nstpCfMitigated * nstp__st_globalTreesPerTonCF;\nconst nstpPercentageTotalWaterConsumption = (nstp__st_annualWater * 100) / nstp__st_annualBaselineWaterConsumption\nreturn {\n    nstpCfMitigated: nstpCfMitigated,\n    nstpSDGNumber: nstpSDGNumber,\n    nstpTreesSaves: nstpTreesSaves,\n    nstpPercentageTotalWaterConsumption: nstpPercentageTotalWaterConsumption\n}"
    },
    {
      "id": "nstp__q_outcomesPreSdPlus",
      "projectInputs": [
        "nstp__pi_city",
        "nstp__pi_baseCaseStp"
      ],
      "staticValues": [
        "nstp__st_globalYoyInflationMBBR",
        "nstp__st_globalCurrentYearMBBR",
        "nstp__st_stpcoStudyYearMBBR",
        "nstp__st_stpcoCivilMBBR",
        "nstp__st_stpcoMAndEMBBR",
        "nstp__st_stpcoCapacityMBBR",
        "nstp__st_stpcoInflationMBBR",
        "nstp__st_stpcoElectricityMBBR",
        "nstp__st_stpcoChemicalMBBR",
        "nstp__st_stpcoWorkforceMBBR",
        "nstp__st_globalYoyInflationMBR",
        "nstp__st_globalCurrentYearMBR",
        "nstp__st_stpcoStudyYearMBR",
        "nstp__st_stpcoCivilMBR",
        "nstp__st_stpcoMAndEMBR",
        "nstp__st_stpcoCapacityMBR",
        "nstp__st_stpcoInflationMBR",
        "nstp__st_stpcoElectricityMBR",
        "nstp__st_stpcoChemicalMBR",
        "nstp__st_stpcoWorkforceMBR",
        "nstp__st_globalYoyInflationSBR",
        "nstp__st_globalCurrentYearSBR",
        "nstp__st_stpcoStudyYearSBR",
        "nstp__st_stpcoCivilSBR",
        "nstp__st_stpcoMAndESBR",
        "nstp__st_stpcoCapacitySBR",
        "nstp__st_stpcoInflationSBR",
        "nstp__st_stpcoElectricitySBR",
        "nstp__st_stpcoChemicalSBR",
        "nstp__st_stpcoWorkforceSBR",
        "nstp__st_mbbrArea",
        "nstp__st_mbrArea",
        "nstp__st_sbrArea"
      ],
      "lookUps": [],
      "quantities": [
        "twr__q_stpCapacityCalculator"
      ],
      "output": "let capex = 0;\n    let opex = 0;\n    let annualEnergy = 0;\n    let nstpAreaPreSdPlus = 0;\n\n    if (nstp__pi_baseCaseStp === 'MBBR') {\n        let { stpcoCapex: capOne, stpcoAnnualEnergy: energyOne, stpcoOpex: opexOne } = utilities.utility_stpCapexOpex(nstp__st_globalYoyInflationMBBR,\n            nstp__st_globalCurrentYearMBBR,\n            nstp__st_stpcoStudyYearMBBR,\n            nstp__st_stpcoCivilMBBR,\n            nstp__st_stpcoMAndEMBBR,\n            nstp__st_stpcoCapacityMBBR,\n            nstp__st_stpcoInflationMBBR,\n            nstp__st_stpcoElectricityMBBR,\n            nstp__pi_city,\n            nstp__st_stpcoChemicalMBBR,\n            nstp__st_stpcoWorkforceMBBR);\n        capex = capex + capOne;\n        opex = opex + opexOne;\n        annualEnergy = annualEnergy + energyOne;\n        nstpAreaPreSdPlus = nstp__st_mbbrArea * twr__q_stpCapacityCalculator.stpCapacity\n    };\n    if (nstp__pi_baseCaseStp === 'MBR') {\n        let { stpcoCapex: capTwo, stpcoAnnualEnergy: energyTwo, stpcoOpex: opexTwo } = utilities.utility_stpCapexOpex(nstp__st_globalYoyInflationMBR,\n            nstp__st_globalCurrentYearMBR,\n            nstp__st_stpcoStudyYearMBR,\n            nstp__st_stpcoCivilMBR,\n            nstp__st_stpcoMAndEMBR,\n            nstp__st_stpcoCapacityMBR,\n            nstp__st_stpcoInflationMBR,\n            nstp__st_stpcoElectricityMBR,\n            nstp__pi_city,\n            nstp__st_stpcoChemicalMBR,\n            nstp__st_stpcoWorkforceMBR);\n        capex = capex + capTwo;\n        opex = opex + opexTwo;\n        annualEnergy = annualEnergy + energyTwo;\n        nstpAreaPreSdPlus = nstp__st_mbrArea * twr__q_stpCapacityCalculator.stpCapacity\n    };\n    if (nstp__pi_baseCaseStp === 'SBR') {\n        let { stpcoCapex: capThree, stpcoAnnualEnergy: energyThree, stpcoOpex: opexThree } = utilities.utility_stpCapexOpex(nstp__st_globalYoyInflationSBR,\n            nstp__st_globalCurrentYearSBR,\n            nstp__st_stpcoStudyYearSBR,\n            nstp__st_stpcoCivilSBR,\n            nstp__st_stpcoMAndESBR,\n            nstp__st_stpcoCapacitySBR,\n            nstp__st_stpcoInflationSBR,\n            nstp__st_stpcoElectricitySBR,\n            nstp__pi_city,\n            nstp__st_stpcoChemicalSBR,\n            nstp__st_stpcoWorkforceSBR);\n   \n        capex = capex + capThree;\n        opex = opex + opexThree;\n        annualEnergy = annualEnergy + energyThree;\n        nstpAreaPreSdPlus = nstp__st_sbrArea * twr__q_stpCapacityCalculator.stpCapacity\n    };\n    return {\n        capex: capex,\n        opex: opex,\n        annualEnergy: annualEnergy,\n        nstpAreaPreSdPlus: nstpAreaPreSdPlus\n    }"
    },
    {
      "id": "nstp__q_outcomes",
      "projectInputs": [
        "nstp__pi_city"
      ],
      "staticValues": [
        "nstp__st_waterSavingPercentage",
        "nstp__st_selectedProductPrice",
        "nstp__st_selectedProductOpexElectricity",
        "nstp__st_globalStandardWorkforceSalary",
        "nstp__st_selectedProductOpexWorkforce",
        "nstp__st_selectedProductOpexBacteria",
        "nstp__st_selectedProductOpexChemical",
        "nstp__st_selectedProductArea"
      ],
      "lookUps": [],
      "quantities": [
        "twr__q_stpCapacityCalculator",
        "nstp__q_outcomesPreSdPlus"
      ],
      "output": "const energy = nstp__st_selectedProductOpexElectricity * twr__q_stpCapacityCalculator.stpCapacity * CityDbData[nstp__pi_city].residentialUtilityTariff;\nconst workforce = nstp__st_selectedProductOpexWorkforce * nstp__st_globalStandardWorkforceSalary;\nconst chemical = nstp__st_selectedProductOpexChemical * twr__q_stpCapacityCalculator.stpCapacity;\nconst bacteria = nstp__st_selectedProductOpexBacteria * twr__q_stpCapacityCalculator.stpCapacity;\nlet ret = {\n    annualWater: twr__q_stpCapacityCalculator.stpCapacity * nstp__st_waterSavingPercentage,\n    capexPostSdPlus: twr__q_stpCapacityCalculator.stpCapacity * nstp__st_selectedProductPrice,\n    nstpCapex: (twr__q_stpCapacityCalculator.stpCapacity * nstp__st_selectedProductPrice) - nstp__q_outcomesPreSdPlus.capex,\n    nstpCapexAnnualEnergyPostSdPlus: energy,\n    nstpCapexAnnualWorkforcePostSdPlus: workforce,\n    nstpCapexAnnualEnergyChemicalSdPlus: chemical,\n    nstpCapexAnnualBacteriaPostSdPlus: bacteria,\n    nstpOpex: nstp__q_outcomesPreSdPlus.opex - (energy + bacteria + workforce + chemical),\n    nstpArea: nstp__st_selectedProductArea * twr__q_stpCapacityCalculator.stpCapacity\n};\nreturn ret"
    }
  ]
}